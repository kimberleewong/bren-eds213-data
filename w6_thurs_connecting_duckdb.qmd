---
title: "Connecting duckdb"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(DBI)
library(duckdb)
```

Let's connect our database
```{r}
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir = "database/database.db")
```

Let's look at tables
```{r}
DBI::dbListTables(conn)
```


```{r}
species <- tbl(conn, "Species")
species
```

## Let's do first query
```{r}
species_a <- dbGetQuery(conn, "SELECT * FROM Species WHERE Code LIKE '%a'")
species_a
```

### There is a better way
```{r}
library(dbplyr)
```

```{r}
species %>% 
  filter(Relevance == "Study species") %>% 
  select(Code, Scientific_name) %>% 
  show_query()

```

```{r}
species_study <- species %>% 
  filter(Relevance == "Study species") %>% 
  select(Code, Scientific_name)
```

```{r}
class(species_study)
dim(species_study)
```

### Can I group?
```{r}
species %>% 
  group_by(Relevance) %>% 
  summarize(num_species = n()) %>% 
  show_query()
```

### Can also mutate
```{r}
species %>% 
  mutate(Code_x = paste0("X", Code)) %>% 
  show_query()
```

### How do we get the full data?
```{r}
species_X <- species %>% 
  mutate(Code_x = paste0("X", Code)) %>% 
  collect()
```

### You can do joins!!!
```{r}
eggs_db <- tbl(conn, "Bird_eggs")
nests_db <- tbl(conn, "Bird_nests")
```

```{r}
nest_eggs_df <- left_join(nests_db, eggs_db, by = "Nest_ID", keep = FALSE) %>% 
  collect()
```

### Don't forget to close the connection
```{r}
DBI::dbDisconnect(conn, shutdown = TRUE)
```





